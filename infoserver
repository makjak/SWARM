-- SWARM Status Listener
-- Collects status messages from drones and sends them to webdisplay.


infoserver = {}
version = "0.1"
os.loadAPI("swarm")
swarm.setSystemType("infoserver")

-- Settings:
local url = "http://dunkelraum.net/share/alphaomega.php"


	local width,height = term.getSize()
	local scrollPosX = 1
	local scrollPosY = 1
	local data = {}
-- Code:
function main()
	swarm.openModem()
	local t = os.startTimer(4)
	local e,msg,r
	local str = ""
	local startTime = os.clock()
	
	-- Initial request of drone stati
	rednet.broadcast(string.char(100))
	rednet.broadcast(string.char(120))
	local request = nil
	-- Event loop, run forever
	while true do
		e = {os.pullEvent()}
		if e[1] == "rednet_message" and e[3]:byte(1) == 101 then -- Receive current status 
			if data[e[2]] == nil then
				data[e[2]] = {}
			end
			data[e[2]][1] = string.sub(e[3],2)
		elseif e[1] == "rednet_message" and e[3]:byte(1) == 121 then -- Receive detailled status
			if data[e[2]] == nil then
				data[e[2]] = {}
			end
			data[e[2]][3] = textutils.unserialize(string.sub(e[3],2)) -- Receive??? oehm...??? PING?
		elseif e[1] == "rednet_message" and e[3]:byte(1) == 10 then
			if data[e[2]] == nil then
				data[e[2]] = {}
			end
			data[e[2]][2] = textutils.unserialize(string.sub(e[3],2))
		end
		
	end
end
function key()
	local e
	while true do
		e = {os.pullEvent("key")}
		if e[2] == 16 then
			print("Q pressed, quitting...")
			break
		elseif e[2] == 200 then
			scrollPosY = math.min(swarm.countArray(data)-(height-2),scrollPosY + 1)
		elseif e[2] == 208 then
			scrollPosY = math.max(1,scrollPosY - 1)
		elseif e[2] == 205 then
			scrollPosX = math.min(256,scrollPosX + 1)
		elseif e[2] == 203 then
			scrollPosX = math.max(1,scrollPosX - 1)
		end
	
	end
end
function gui()
	while true do
		term.setCursorPos(1,1)
		term.clear()
		print(swarm.getInfoString().." "..swarm.activityIndicator())
		print("Press arrows to scroll, q to quit. ["..scrollPosX.."x"..scrollPosY.."]")
		local tmp,n,i
		
		i = 0
		for k,v in pairs(data) do
			if i >= scrollPosY then
				tmp = k..": "
				n = width - #tmp
				
				io.write(tmp)
				if type(v) == "table" then
					for kk,vv in pairs(v) do
						if type(vv) == "table" then
							io.write(string.sub(vv[#vv],scrollPosX,n+scrollPosX-1))
						end
						
					end
				end
				io.write("\n")
			end
			i = i + 1
		end	
		-- Update local display at 10 fps
		sleep(0.1)
	end
end
function send()
	while true do
		-- JSON-Encode the data to be send
		str = "{"
		for k,v in pairs(data) do
			sleep(0)
			str = str.."\""..k.."\": [ "
			if v[1] ~= nil then
			v[1] = string.gsub(v[1],'"',"'")
			end
			if v ~= nil and v[1] ~= nil and v[2] ~= nil and v[2]["uptime"] ~= nil then
				str = str.."\""..v[1].." up: "..v[2]["uptime"].."s\","
			elseif v ~= nil and v[1] ~= nil then
				str = str.."\""..v[1].." \","
			end
			if #v >= 3 then
				
				if v[3] ~= nil and type(v[3]) == "table" and #v[3] > 0 then
					str = str.."{"
					for i,vv in pairs(v[3]) do
						sleep(0)
						--if type(vv) == "string" then
							vv = string.gsub(vv,'"',"'")
							str = str.."\""..i.."\":\""..(vv).."\","
						--end
					end
					str = string.sub(str,1,#str-1).."},"
				end
				
			end
			if #v >= 2 then
				str = str.."\""..v[2][4].."\","
			end
			str = string.sub(str,1,#str-1).."],"
		end
		str = string.sub(str,1,#str-1).."}"
		
		
		-- Actually send the data
		http.post(url.."?"..swarm.urlEncode(str),textutils.serialize(str))
		--request = http.request(url.."?"..swarm.urlEncode(str),textutils.serialize(str))
		
		-- Request some more status updates from drones in the area
		rednet.broadcast(string.char(100))
		rednet.broadcast(string.char(120))
	
		-- Restart timer
		sleep(1)
	end
end

function run()
	function wrapMain() return swarm.wrap(main,"main") end 
	function wrapGui() return swarm.wrap(gui,"gui") end 
	function wrapSend() return swarm.wrap(send,"sender") end 
	function wrapKeyboard() return swarm.wrap(key,"keyboard handler") end 
	parallel.waitForAny(wrapMain,wrapGui,wrapKeyboard,warpSend)
end
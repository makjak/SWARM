-- SWARM Status Listener
-- Collects status messages from drones and sends them to webdisplay.


infoserver = {}
version = "0.1"
os.loadAPI("swarm")
swarm.setSystemType("infoserver")

-- Settings:
local url = "http://dunkelraum.net/share/alphaomega.php"


local width,height = term.getSize()
local scrollPosX = 1
local scrollPosY = 1
local data = {}


-- Code:
function main()
	swarm.openModem()
	local t = os.startTimer(4)
	local e,msg,r,c
	local str = ""
	local startTime = os.clock()
	
	local request = nil
	local actions = {
		[101] = function(e)
			if data[e[2]] == nil then data[e[2]] = {} end
			data[e[2]][1] = string.sub(e[3],2)
			end,
		[121] = function(e)
			if data[e[2]] == nil then data[e[2]] = {} end
			data[e[2]][3] = textutils.unserialize(string.sub(e[3],2)) -- Receive??? oehm...??? PING?
			end,
		[10] = function(e)
			if data[e[2]] == nil then data[e[2]] = {} end
			data[e[2]][2] = textutils.unserialize(string.sub(e[3],2))
			end,
		[100] = function(e)
			rednet.send(e[4],string.char(101).."["..swarm.getSystemType().."] "..swarm.id.." ["..swarm.label.."]")
			end,
		[110] = function(e)
			swarm.status("received reboot signal")
			rednet.send(e[4],string.char(111))
			swarm.status("will now reboot")
			os.reboot()
			end,
		[120] = function(e)
			rednet.send(e[4],string.char(121)..textutils.serialize(swarm._status))
			end,
		[130] = function(e)
			os.reboot()
			end,
		[140] = function(e)
			swarm.status("received shutdown signal")
			rednet.send(e[4],string.char(141))
			swarm.status("will now shutdown")
			os.shutdown()
			end,
	}
	-- Event loop, run forever
	while true do
		e = {os.pullEvent("rednet_message")}
		c = e[3]:byte(1)
		if actions[c] ~= nil then
			actions[c](e)
		end
	end
end


function ask()
	swarm.openModem()
	while true do
		rednet.broadcast(string.char(100))
		rednet.broadcast(string.char(120))
		--print("ask")
		sleep(1)
	end
end
	
function key()
	local e,c
	local actions = {
		[16] = function(e)
			print("Q pressed, quitting...")
			return false
			end,
		[200] = function(e)
			scrollPosY = math.min(math.max(1,swarm.countArray(data)-(height-2)),scrollPosY + 1)
			return true
			end,
		[208] = function(e)
			scrollPosY = math.max(1,scrollPosY - 1)
			return true
			end,
		[205] = function(e)
			scrollPosX = math.min(256,scrollPosX + 1)
			return true
			end,
		[203] = function(e)
			scrollPosX = math.max(1,scrollPosX - 1)
			return true
			end,
	}
	
	-- Event loop, run forever
	while true do
		e = {os.pullEvent("key")}
		c = e[2]
		if actions[c] ~= nil then
			if not actions[c](e) then
				break
			end
			
		end
	end
end
function gui()
	while true do
		term.setCursorPos(1,1)
		term.clear()
		print(swarm.getInfoString().." "..swarm.activityIndicator())
		print("Press arrows to scroll, q to quit. ["..scrollPosX.."x"..scrollPosY.."]")
		local tmp,n,i
		
		
		i = 1
		for k,v in swarm.pairsAssoc(data) do
			if i >= scrollPosY then
				tmp = k..": "
				n = width - #tmp
				
				io.write(tmp)
				if type(v) == "table" then
					for kk,vv in pairs(v) do
						if type(vv) == "table" then
							io.write(string.sub(vv[#vv],scrollPosX,n+scrollPosX-1))
						end
						
					end
				else io.write(v)
				end
				io.write("\n")
			end
			i = i + 1
		end	
		-- Update local display at 10 fps
		sleep(0.5)
	end
end
function send()
	while true do
		-- JSON-Encode the data to be send, this is a mess, make it simpler and with less exceptions
		str = "{"
		for k,v in pairs(data) do
			sleep(0)
			str = str.."\""..k.."\": [ "
			if v[1] ~= nil then
			v[1] = string.gsub(v[1],'"',"'")
			end
			if v ~= nil and v[1] ~= nil and v[2] ~= nil and v[2]["uptime"] ~= nil then
				str = str.."\""..v[1].." up: "..v[2]["uptime"].."s\","
			elseif v ~= nil and v[1] ~= nil then
				str = str.."\""..v[1].." \","
			end
			if #v >= 3 then
				
				if v[3] ~= nil and type(v[3]) == "table" and #v[3] > 0 then
					str = str.."{"
					for i,vv in pairs(v[3]) do
						sleep(0)
						--if type(vv) == "string" then
							vv = string.gsub(vv,'"',"'")
							str = str.."\""..i.."\":\""..(vv).."\","
						--end
					end
					str = string.sub(str,1,#str-1).."},"
				end
				
			end
			if #v >= 2 then
				str = str.."\""..v[2][4].."\","
			end
			str = string.sub(str,1,#str-1).."],"
		end
		str = string.sub(str,1,#str-1).."}"
		
		
		-- Actually send the data
		http.post(url.."?"..swarm.urlEncode(str),textutils.serialize(str))
		--request = http.request(url.."?"..swarm.urlEncode(str),textutils.serialize(str))
	
	
		-- Restart timer
		sleep(4)
	end
end

function run()
	function wrapMain() return swarm.wrap(main,"main") end 
	function wrapGui() return swarm.wrap(gui,"gui") end 
	function wrapAsk() return swarm.wrap(ask,"ask") end 
	function wrapSend() return swarm.wrap(send,"sender") end 
	function wrapKeyboard() return swarm.wrap(key,"keyboard handler") end 
	--parallel.waitForAny(wrapMain,wrapGui,wrapKeyboard,warpSend,wrapAsk)
	parallel.waitForAny(wrapMain,wrapAsk,wrapKeyboard,wrapSend,wrapGui)
end
